{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SofyaZeleneva/MMVSULAB1/blob/main/%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B0%20%D0%B4%D0%BB%D1%8F%20%D0%B4%D0%B8%D0%BF%D0%BB%D0%BE%D0%BC%D0%B0\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import scipy.integrate as integral\n",
        "import matplotlib.pyplot as plt\n",
        "import math\n",
        "VV=True\n",
        "NN = 100\n",
        "while VV:\n",
        "    try:\n",
        "        print(\"Введите N \")\n",
        "        NN=int(input())\n",
        "        if (not(NN>0)) or NN!=int(NN):\n",
        "            print(\"Число должно быть натуральным\")\n",
        "        else:\n",
        "            VV=not(NN>0)\n",
        "    except:\n",
        "        print(\"Некорректное число\")\n",
        "N = NN+1\n",
        "a=0\n",
        "b=1\n",
        "Hh1=0.5  \n",
        "Hh2=-0.5\n",
        "step = (b-a)/NN\n",
        "Mxi = 0\n",
        "xii = [1, 1/2, 3/4]\n",
        "gamma=[0]\n",
        "qxii = [3, 0.9, 2.5]\n",
        "fxii = [14, 1.875, 4.6125]\n",
        "def p(x):\n",
        "    if a<=x and x<=b:\n",
        "        return 1\n",
        "        if x<1:\n",
        "            return 1+x \n",
        "        return x+2\n",
        "    else:\n",
        "        return 0\n",
        "def q(x):\n",
        "    return 0\n",
        "    if a<=x and x<=b:\n",
        "        if x<1:\n",
        "            return 3*x**2\n",
        "        return 2*x\n",
        "    else:\n",
        "        return 0\n",
        "def toch(x):\n",
        "  return -x**2+3/2*x       \n",
        "def f(x):\n",
        "    if a<=x and x<=b:\n",
        "        return 2\n",
        "        if x<xii[0]:\n",
        "            return 3*x**3-1\n",
        "        return 3*x**3-12*x**2+5*x\n",
        "        if x<xii[1]:\n",
        "            return x**2-29/16\n",
        "        if x<xii[2]:\n",
        "            return 7/16\n",
        "        return -1.55*x+1.6\n",
        "    else:\n",
        "        return 0\n",
        "def progonka(a,b,c,NN):\n",
        "    for i in range(1,NN):\n",
        "        c[i]-=c[i-1]*b[i-1]/a[i-1]\n",
        "        a[i]-=b[i-1]*b[i-1]/a[i-1]\n",
        "    # Обратный...\n",
        "    xxlocal=[0 for i in range(NN)]\n",
        "    xxlocal[NN-1]=c[NN-1]/a[NN-1]\n",
        "    for i in range(NN-2,-1,-1):\n",
        "        xxlocal[i]=(c[i]-b[i]*xxlocal[i+1])/a[i]\n",
        "    return xxlocal\n",
        "A = [0 for i in range(N)]\n",
        "B = [0 for i in range(N-1)]\n",
        "F = [0 for i in range(N)]\n",
        "X = [0 for i in range(N)]\n",
        "for i in range(N):\n",
        "    xk = i*step\n",
        "    c1, d1 = integral.quad(lambda t: p(xk+t*step), -1, 0)\n",
        "    c2, d2 = integral.quad(lambda t: p(xk+t*step), 0, 1)\n",
        "    c3, d1 = integral.quad(lambda t: q(xk+t*step)*(t+1)**2, -1, 0)\n",
        "    c4, d2 = integral.quad(lambda t: q(xk+t*step)*(-t+1)**2, 0, 1)\n",
        "    A[i] += (c3+c4)*step+(c1+c2)/step\n",
        "    for m in range(Mxi):\n",
        "        if xk-step<xii[m] and xii[m]<=xk:\n",
        "            A[i] += qxii[m]*((xii[m]-xk+step)/step)**2\n",
        "        if xk+step>xii[m] and xii[m]>xk:\n",
        "            A[i] += qxii[m]*((xk+step-xii[m])/step)**2\n",
        "    c3, d1 = integral.quad(lambda t: f(xk+t*step)*(t+1), -1, 0)\n",
        "    c4, d2 = integral.quad(lambda t: f(xk+t*step)*(-t+1), 0, 1)\n",
        "    F[i] += (c3+c4)*step\n",
        "    for m in range(Mxi):\n",
        "        if xk-step<xii[m] and xii[m]<=xk:\n",
        "            F[i] += fxii[m]*((xii[m]-xk+step)/step)\n",
        "        if xk+step>xii[m] and xii[m]>xk:\n",
        "            F[i] += fxii[m]*((xk+step-xii[m])/step)\n",
        "for i in range(N-1):\n",
        "    xk = i*step\n",
        "    c2, d2 = integral.quad(lambda t: p(xk+t*step), 0, 1)\n",
        "    c4, d2 = integral.quad(lambda t: q(xk+t*step)*(-t+1)*t, 0, 1)\n",
        "    B[i] += (c4)*step-(c2)/step\n",
        "    for m in range(Mxi):\n",
        "        if xk+step>xii[m] and xii[m]>=xk:\n",
        "            B[i] += qxii[m]*((xk+step-xii[m])/step)*((xii[m]-xk)/step)\n",
        "for i in range(N-1):\n",
        "    A[i]=A[i+1]\n",
        "    F[i]=F[i+1]\n",
        "for i in range(N-2):\n",
        "    B[i]=B[i+1]\n",
        "N1=N\n",
        "N=N-1\n",
        "X=progonka(A,B,F,N)\n",
        "def Phi(x, m):\n",
        "    if (m-1)*step<=x and x<=m*step:\n",
        "        return (x-(m-1)*step)/step\n",
        "    if (m+1)*step>=x and x>=m*step:\n",
        "        return ((m+1)*step-x)/step\n",
        "    return 0\n",
        "def Pribl(x):\n",
        "    qw=0\n",
        "    for m in range(N):\n",
        "        qw += X[m]*Phi(x, m+1)\n",
        "    return qw\n",
        "Mm=100\n",
        "x = [(b-a)*i/Mm for i in range(Mm+1)]\n",
        "A1 = [0 for i in range(N1)]\n",
        "B1 = [0 for i in range(N1-1)]\n",
        "F1 = [0 for i in range(N1)]\n",
        "X1 = [0 for i in range(N1)]\n",
        "for i in range(N1):\n",
        "    xk = i*step\n",
        "    c1, d1 = integral.quad(lambda t: p(xk+t*step), -1, 0)\n",
        "    c2, d2 = integral.quad(lambda t: p(xk+t*step), 0, 1)\n",
        "    c3, d1 = integral.quad(lambda t: q(xk+t*step)*(t+1)**2, -1, 0)\n",
        "    c4, d2 = integral.quad(lambda t: q(xk+t*step)*(-t+1)**2, 0, 1)\n",
        "    for m in range(Mxi):\n",
        "        if xk-step<xii[m] and xii[m]<=xk:\n",
        "            A1[i] += qxii[m]*((xii[m]-xk+step)/step)**2\n",
        "        if xk+step>xii[m] and xii[m]>xk:\n",
        "            A1[i] += qxii[m]*((xk+step-xii[m])/step)**2\n",
        "    A1[i] += (c3+c4)*step+(c1+c2)/step\n",
        "    F1[i]=0\n",
        "for i in range(N1-1):\n",
        "    xk = i*step\n",
        "    c2, d2 = integral.quad(lambda t: p(xk+t*step), 0, 1)\n",
        "    c4, d2 = integral.quad(lambda t: q(xk+t*step)*(-t+1)*t, 0, 1)\n",
        "    B1[i] += (c4)*step-(c2)/step\n",
        "    for m in range(Mxi):\n",
        "        if xk+step>xii[m] and xii[m]>=xk:\n",
        "            B1[i] += qxii[m]*((xk+step-xii[m])/step)*((xii[m]-xk)/step)\n",
        "for i in range(N1-1):\n",
        "    A1[i]=A1[i+1]\n",
        "    F1[i]=F1[i+1]\n",
        "for i in range(N1-2):\n",
        "    B1[i]=B1[i+1]\n",
        "N1=N1-1\n",
        "#A1[N1-1] += 1\n",
        "F1[N1-1] += 1\n",
        "X1=progonka(A1,B1,F1,N1)\n",
        "def Pribl1(x):\n",
        "    qw=0\n",
        "    for m in range(N1):\n",
        "        qw += X1[m]*Phi(x, m+1)\n",
        "    return qw\n",
        "if Hh2<Pribl(b) and Pribl(b)<Hh1:\n",
        "    UFF=0\n",
        "    uF=0\n",
        "    Hh=0\n",
        "if Pribl(b)>=Hh1:\n",
        "    UFF=1\n",
        "    uF=1\n",
        "    Hh=Hh1\n",
        "if Pribl(b)<=Hh2:\n",
        "    UFF=1\n",
        "    uF=-1\n",
        "    Hh=Hh2\n",
        "Rr=Pribl(b)\n",
        "def Pribl2(x):\n",
        "    return Pribl(x)+UFF*(Pribl1(x)/Pribl1(b))*(Hh-Pribl(b))\n",
        "y = [Pribl2(i) for i in x]\n",
        "t=[toch(i) for i in x]\n",
        "plt.plot(x,y,x, t)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "id": "aTLzsKGYb7OM",
        "outputId": "a50e08c3-9e8e-4076-ca83-10ce88d0aa0d",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 465
        }
      },
      "execution_count": 1,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Введите N \n",
            "5\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "name": "Добро пожаловать в Colaboratory!",
      "toc_visible": true,
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}